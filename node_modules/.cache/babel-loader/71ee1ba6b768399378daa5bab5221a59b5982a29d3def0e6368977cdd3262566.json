{"ast":null,"code":"// This optional code is used to register a service worker.\n// register() is not called by default.\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\nvar isLocalhost=Boolean(window.location.hostname==='localhost'||// [::1] is the IPv6 localhost address.\nwindow.location.hostname==='[::1]'||// 127.0.0.1/8 is considered localhost for IPv4.\nwindow.location.hostname.match(/^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/));export function register(config){if(process.env.NODE_ENV==='production'&&'serviceWorker'in navigator){// The URL constructor is available in all browsers that support SW.\nvar publicUrl=new URL(process.env.PUBLIC_URL,window.location.href);if(publicUrl.origin!==window.location.origin){// Our service worker won't work if PUBLIC_URL is on a different origin\n// from what our page is served on. This might happen if a CDN is used to\n// serve assets; see https://github.com/facebook/create-react-app/issues/2374\nreturn;}window.addEventListener('load',function(){var swUrl=\"\".concat(process.env.PUBLIC_URL,\"/service-worker.js\");if(isLocalhost){// This is running on localhost. Let's check if a service worker still exists or not.\ncheckValidServiceWorker(swUrl,config);// Add some additional logging to localhost, pointing developers to the\n// service worker/PWA documentation.\nnavigator.serviceWorker.ready.then(function(){console.log('This web app is being served cache-first by a service '+'worker. To learn more, visit https://bit.ly/CRA-PWA');});}else{// Is not localhost. Just register service worker\nregisterValidSW(swUrl,config);}});}}function registerValidSW(swUrl,config){navigator.serviceWorker.register(swUrl).then(function(registration){registration.onupdatefound=function(){var installingWorker=registration.installing;if(installingWorker==null){return;}installingWorker.onstatechange=function(){if(installingWorker.state==='installed'){if(navigator.serviceWorker.controller){// At this point, the updated precached content has been fetched,\n// but the previous service worker will still serve the older\n// content until all client tabs are closed.\nconsole.log('New content is available and will be used when all '+'tabs for this page are closed. See https://bit.ly/CRA-PWA.');// Execute callback\nif(config&&config.onUpdate){config.onUpdate(registration);}}else{// At this point, everything has been precached.\n// It's the perfect time to display a\n// \"Content is cached for offline use.\" message.\nconsole.log('Content is cached for offline use.');// Execute callback\nif(config&&config.onSuccess){config.onSuccess(registration);}}}};};}).catch(function(error){console.error('Error during service worker registration:',error);});}function checkValidServiceWorker(swUrl,config){// Check if the service worker can be found. If it can't reload the page.\nfetch(swUrl).then(function(response){// Ensure service worker exists, and that we really are getting a JS file.\nvar contentType=response.headers.get('content-type');if(response.status===404||contentType!=null&&contentType.indexOf('javascript')===-1){// No service worker found. Probably a different app. Reload the page.\nnavigator.serviceWorker.ready.then(function(registration){registration.unregister().then(function(){window.location.reload();});});}else{// Service worker found. Proceed as normal.\nregisterValidSW(swUrl,config);}}).catch(function(){console.log('No internet connection found. App is running in offline mode.');});}export function unregister(){if('serviceWorker'in navigator){navigator.serviceWorker.ready.then(function(registration){registration.unregister();});}}","map":{"version":3,"names":["isLocalhost","Boolean","window","location","hostname","match","register","config","process","env","NODE_ENV","navigator","publicUrl","URL","PUBLIC_URL","href","origin","addEventListener","swUrl","concat","checkValidServiceWorker","serviceWorker","ready","then","console","log","registerValidSW","registration","onupdatefound","installingWorker","installing","onstatechange","state","controller","onUpdate","onSuccess","catch","error","fetch","response","contentType","headers","get","status","indexOf","unregister","reload"],"sources":["/Users/galovadia/Downloads/new-OH-Queue/OH-queue/src/serviceWorker.js"],"sourcesContent":["// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n    window.location.hostname === 'localhost' ||\n        // [::1] is the IPv6 localhost address.\n        window.location.hostname === '[::1]' ||\n        // 127.0.0.1/8 is considered localhost for IPv4.\n        window.location.hostname.match(/^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/)\n);\n\nexport function register(config) {\n    if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n        // The URL constructor is available in all browsers that support SW.\n        const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n        if (publicUrl.origin !== window.location.origin) {\n            // Our service worker won't work if PUBLIC_URL is on a different origin\n            // from what our page is served on. This might happen if a CDN is used to\n            // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n            return;\n        }\n\n        window.addEventListener('load', () => {\n            const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n            if (isLocalhost) {\n                // This is running on localhost. Let's check if a service worker still exists or not.\n                checkValidServiceWorker(swUrl, config);\n\n                // Add some additional logging to localhost, pointing developers to the\n                // service worker/PWA documentation.\n                navigator.serviceWorker.ready.then(() => {\n                    console.log(\n                        'This web app is being served cache-first by a service ' +\n                            'worker. To learn more, visit https://bit.ly/CRA-PWA'\n                    );\n                });\n            } else {\n                // Is not localhost. Just register service worker\n                registerValidSW(swUrl, config);\n            }\n        });\n    }\n}\n\nfunction registerValidSW(swUrl, config) {\n    navigator.serviceWorker\n        .register(swUrl)\n        .then((registration) => {\n            registration.onupdatefound = () => {\n                const installingWorker = registration.installing;\n                if (installingWorker == null) {\n                    return;\n                }\n                installingWorker.onstatechange = () => {\n                    if (installingWorker.state === 'installed') {\n                        if (navigator.serviceWorker.controller) {\n                            // At this point, the updated precached content has been fetched,\n                            // but the previous service worker will still serve the older\n                            // content until all client tabs are closed.\n                            console.log(\n                                'New content is available and will be used when all ' +\n                                    'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n                            );\n\n                            // Execute callback\n                            if (config && config.onUpdate) {\n                                config.onUpdate(registration);\n                            }\n                        } else {\n                            // At this point, everything has been precached.\n                            // It's the perfect time to display a\n                            // \"Content is cached for offline use.\" message.\n                            console.log('Content is cached for offline use.');\n\n                            // Execute callback\n                            if (config && config.onSuccess) {\n                                config.onSuccess(registration);\n                            }\n                        }\n                    }\n                };\n            };\n        })\n        .catch((error) => {\n            console.error('Error during service worker registration:', error);\n        });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n    // Check if the service worker can be found. If it can't reload the page.\n    fetch(swUrl)\n        .then((response) => {\n            // Ensure service worker exists, and that we really are getting a JS file.\n            const contentType = response.headers.get('content-type');\n            if (response.status === 404 || (contentType != null && contentType.indexOf('javascript') === -1)) {\n                // No service worker found. Probably a different app. Reload the page.\n                navigator.serviceWorker.ready.then((registration) => {\n                    registration.unregister().then(() => {\n                        window.location.reload();\n                    });\n                });\n            } else {\n                // Service worker found. Proceed as normal.\n                registerValidSW(swUrl, config);\n            }\n        })\n        .catch(() => {\n            console.log('No internet connection found. App is running in offline mode.');\n        });\n}\n\nexport function unregister() {\n    if ('serviceWorker' in navigator) {\n        navigator.serviceWorker.ready.then((registration) => {\n            registration.unregister();\n        });\n    }\n}\n"],"mappings":"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"},"metadata":{},"sourceType":"module","externalDependencies":[]}