{"ast":null,"code":"import request from 'superagent';\nconst config = require('./secret.config.json');\nconst CALENDAR_ID = config.cal_id;\nconst API_KEY = config.api_key;\nlet url = `https://www.googleapis.com/calendar/v3/calendars/${CALENDAR_ID}/events?key=${API_KEY}`;\nlet nextOpeningTime = \"[Calculating...]\";\nexport let nextClosingTime = null;\nfunction parseStart(time) {\n  let t = time.substring(0, 11);\n  t += '00:00:00.00Z';\n  return t;\n}\nfunction parseEnd(time) {\n  let t = time.substring(0, 11);\n  t += '23:59:00.00Z';\n  return t;\n}\nfunction getOpeningTime(days) {\n  const now = new Date();\n  let endDate = new Date();\n  endDate.setDate(endDate.getDate() + days);\n  let params = {\n    singleEvents: true,\n    timeMin: parseStart(now.toISOString()),\n    timeMax: parseEnd(endDate.toISOString())\n  };\n  request.get(url, params).end((err, resp) => {\n    if (!err) {\n      const startTimes = JSON.parse(resp.text).items.map(event => event.start.dateTime);\n      nextOpeningTime = parseTime(new Date(startTimes.sort()[0]));\n    }\n  });\n}\nfunction getClosingTime() {\n  const date = new Date();\n  let params = {\n    singleEvents: true,\n    timeMin: parseStart(date.toISOString()),\n    timeMax: parseEnd(date.toISOString())\n  };\n  request.get(url, params).end((err, resp) => {\n    if (!err) {\n      const endTimes = JSON.parse(resp.text).items.map(event => event.end.dateTime);\n      const lastDatetime = new Date(endTimes.sort()[endTimes.length - 1]);\n      // Display if 1 hour or less remaining in today's OH\n      if (lastDatetime > date && (lastDatetime - date) / (1000 * 60) <= 60) {\n        nextClosingTime = parseTime(lastDatetime, true);\n      } else {\n        nextClosingTime = null;\n      }\n    }\n  });\n}\nfunction parseTime(time, timeOnly) {\n  const ampm = time.getHours() <= 12 ? 'AM' : 'PM';\n  const day = ['Sunday', 'Monday', 'Tuesday', 'Wednesday', 'Thursday', 'Friday', 'Saturday'][time.getDay()];\n  const hours = time.getHours() % 12 || 12; // 12-hour format\n  const minutes = String(time.getMinutes()).padStart(2, '0'); // Pad with a leading zero if needed\n  return timeOnly ? `${hours}:${minutes}` : `${hours}:${minutes} ${ampm} on ${day}`;\n}\nexport function getOnDuty(callback) {\n  const now = new Date().toISOString();\n  let params = {\n    singleEvents: true,\n    timeMin: parseStart(now),\n    timeMax: parseEnd(now)\n  };\n  request.get(url, params).end((err, resp) => {\n    if (!err) {\n      let tasOnDuty = [];\n      // eslint-disable-next-line array-callback-return\n      JSON.parse(resp.text).items.map(event => {\n        const startTime = new Date(event.start.dateTime).toISOString();\n        const endTime = new Date(event.end.dateTime).toISOString();\n        if (now >= startTime && now < endTime) {\n          tasOnDuty.push({\n            name: event.summary.split(\"'\")[0],\n            busy: false\n            /**\n             * Right now, the way we identify remote hours is by adding an identifier to\n             * the calendar invite name. For example, 'Ivan (remote)'.\n             *\n             * This is a bit jank and there are probably better ways to go about doing this,\n             * but time is of the essence and so I'll come back to this later :P\n             */\n          });\n        }\n      });\n\n      let statusMessage = '';\n      getOpeningTime(4);\n      getClosingTime();\n      if (tasOnDuty.length === 0) {\n        // eslint-disable-next-line no-unused-expressions\n        statusMessage = `Office Hours is closed. Check the calendar linked on Canvas to see when we're open!`;\n      } else if (!tasOnDuty.some(ta => !ta.remote)) {\n        statusMessage = '';\n      }\n      callback(tasOnDuty, statusMessage);\n    }\n  });\n}","map":{"version":3,"names":["request","config","require","CALENDAR_ID","cal_id","API_KEY","api_key","url","nextOpeningTime","nextClosingTime","parseStart","time","t","substring","parseEnd","getOpeningTime","days","now","Date","endDate","setDate","getDate","params","singleEvents","timeMin","toISOString","timeMax","get","end","err","resp","startTimes","JSON","parse","text","items","map","event","start","dateTime","parseTime","sort","getClosingTime","date","endTimes","lastDatetime","length","timeOnly","ampm","getHours","day","getDay","hours","minutes","String","getMinutes","padStart","getOnDuty","callback","tasOnDuty","startTime","endTime","push","name","summary","split","busy","statusMessage","some","ta","remote"],"sources":["/Users/galovadia/Downloads/new-OH-Queue/OH-queue/src/gcal.js"],"sourcesContent":["import request from 'superagent';\n\nconst config = require('./secret.config.json');\nconst CALENDAR_ID = config.cal_id;\nconst API_KEY = config.api_key;\nlet url = `https://www.googleapis.com/calendar/v3/calendars/${CALENDAR_ID}/events?key=${API_KEY}`;\nlet nextOpeningTime = \"[Calculating...]\";\nexport let nextClosingTime = null;\n\nfunction parseStart(time) {\n    let t = time.substring(0, 11);\n    t += '00:00:00.00Z';\n    return t;\n}\n\nfunction parseEnd(time) {\n    let t = time.substring(0, 11);\n    t += '23:59:00.00Z';\n    return t;\n}\n\nfunction getOpeningTime(days) {\n    const now = new Date();\n    let endDate = new Date();\n    endDate.setDate(endDate.getDate() + days);\n    let params = {\n        singleEvents: true,\n        timeMin: parseStart(now.toISOString()),\n        timeMax: parseEnd(endDate.toISOString())\n    };\n    request.get(url, params).end((err, resp) => {\n        if (!err) {\n            const startTimes = JSON.parse(resp.text).items.map(event => event.start.dateTime);\n            nextOpeningTime = parseTime(new Date(startTimes.sort()[0]));\n        }\n    })\n}   \n\nfunction getClosingTime() {\n    const date = new Date();\n    let params = {\n        singleEvents: true,\n        timeMin: parseStart(date.toISOString()),\n        timeMax: parseEnd(date.toISOString())\n    };\n    request.get(url, params).end((err, resp) => {\n        if (!err) {\n            const endTimes = JSON.parse(resp.text).items.map(event => event.end.dateTime);\n            const lastDatetime = new Date(endTimes.sort()[endTimes.length - 1]);\n            // Display if 1 hour or less remaining in today's OH\n            if (lastDatetime > date && (lastDatetime - date) / (1000 * 60) <= 60) {\n                nextClosingTime = parseTime(lastDatetime, true);\n            } else {\n                nextClosingTime = null;\n            }\n        }\n    })\n}\n\nfunction parseTime(time, timeOnly) {\n    const ampm = time.getHours() <= 12 ? 'AM' : 'PM'\n    const day = ['Sunday', 'Monday', 'Tuesday', 'Wednesday', 'Thursday', 'Friday', 'Saturday'][time.getDay()]; \n    const hours = time.getHours() % 12 || 12; // 12-hour format\n    const minutes = String(time.getMinutes()).padStart(2, '0'); // Pad with a leading zero if needed\n    return timeOnly ? `${hours}:${minutes}` : `${hours}:${minutes} ${ampm} on ${day}`;\n}\n\nexport function getOnDuty(callback) {\n    const now = new Date().toISOString();\n    let params = {\n        singleEvents: true,\n        timeMin: parseStart(now),\n        timeMax: parseEnd(now),\n    };\n    request.get(url, params).end((err, resp) => {\n        if (!err) {\n            let tasOnDuty = [];\n            // eslint-disable-next-line array-callback-return\n            JSON.parse(resp.text).items.map((event) => {\n                const startTime = new Date(event.start.dateTime).toISOString();\n                const endTime = new Date(event.end.dateTime).toISOString();\n                if (now >= startTime && now < endTime) {\n                    tasOnDuty.push({\n                        name: event.summary.split(\"'\")[0],\n                        busy: false,\n                        /**\n                         * Right now, the way we identify remote hours is by adding an identifier to\n                         * the calendar invite name. For example, 'Ivan (remote)'.\n                         *\n                         * This is a bit jank and there are probably better ways to go about doing this,\n                         * but time is of the essence and so I'll come back to this later :P\n                         */\n                    });\n                }\n            });\n            let statusMessage = '';\n            getOpeningTime(4);\n            getClosingTime();\n            if (tasOnDuty.length === 0) {\n                // eslint-disable-next-line no-unused-expressions\n                statusMessage = `Office Hours is closed. Check the calendar linked on Canvas to see when we're open!`;\n            } else if (!tasOnDuty.some((ta) => !ta.remote)) {\n                statusMessage =\n                    '';\n            }\n            callback(tasOnDuty, statusMessage);\n        }\n    });\n}\n"],"mappings":"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"},"metadata":{},"sourceType":"module","externalDependencies":[]}